*possession*  Flexible session management for Neovim.


COMMANDS                                                 *possession-commands*

                                                             *:PossessionSave*
:PossessionSave [{name}]~

Save the current session information under `session_dir`. If `name` is not
specified then user will be prompted. Use `:PossessionSave! [{name}]` to avoid
asking for confirmation when overwriting existing session file.

                                                             *:PossessionLoad*
:PossessionLoad [{name}]~

Load given session from disk.

                                                           *:PossessionDelete*
:PossessionDelete [{name}]~

Delete given session file.

                                                             *:PossessionList*
:PossessionList~

List available sessions. `:PossessionList!` will not hide the `vimscript`
field that contains commands generated by |:mksession|.


CONFIGURATION                                              *possession-config*

To configure the plugin use:
>
    require('possession').setup { ... }
<

The following configuration options are available:

session_dir~
    `string`
    Path under which the session files are saved.

silent~
    `boolean`
    Suppress info messages.

commands~
    `table | nil`
    If set to falsy value then no commands will be created.

commands.*~
    `string | nil`
    Allows to change the name of the `:Possession*` commands (e.g.
    `commands.save = 'SSave'`) or disable the command if set to a falsy value.

hooks.before_save~
    `function(name: string) => table | nil`
    Invoked on `possession.save` before any actions. Receives session name as
    an argument. Should return a table of `user_data` to be stored in the
    session file. This hook can also return a falsy value to abort session
    saving.

hooks.after_save~
    `function(name: string, user_data: table, aborted: boolean)`
    Invoked just before `possession.save` returns. Receives the final
    `user_data` that has been used for saving. If `aborted` is `true` then the
    session haven't been saved.

hooks.before_load~
    `function(name: string, user_data: table): table | nil`
    Invoked on `possession.load` just after retrieving session data. Receives
    session name and `user_data` for the session to be loaded. This hook
    can modify `user_data` or return it as is. If a falsy value is returned
    then loading will be aborted.

hooks.after_load~
    `function(name: string, user_data: table)`
    Invoked just before `possession.load` returns. Receives the `user_data`
    from the `before_load` hook.


vim:tw=78:et:ft=help:norl:
